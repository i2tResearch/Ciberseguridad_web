"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.CodelensProvider = void 0;
const vscode = require("vscode");
class CodelensProvider {
    constructor() {
        this.codeLenses = [];
        this.processedRules = [];
        this._onDidChangeCodeLenses = new vscode.EventEmitter();
        this.onDidChangeCodeLenses = this._onDidChangeCodeLenses.event;
        this.readRules();
        vscode.workspace.onDidChangeConfiguration((_) => {
            this.readRules();
            this._onDidChangeCodeLenses.fire();
        });
    }
    readRules() {
        const rules = vscode.workspace.getConfiguration("assistant").get("rules");
        const globalModifiers = vscode.workspace.getConfiguration("assistant").get("modifiers");
        if (rules) {
            this.processedRules = [];
            rules.forEach((rule) => {
                // https://stackoverflow.com/a/31970023/38940
                // The index at which to start the next match. When "g" is absent, this will remain as 0.
                // Adding g to prevent infinite loop
                let modifier = rule.modifiers ? rule.modifiers : globalModifiers;
                modifier = modifier ? modifier : 'g';
                if (modifier && !modifier.includes('g')) {
                    modifier += 'g';
                }
                this.processedRules.push({
                    regex: new RegExp(rule.regex, modifier),
                    message: rule.message,
                    fileRegex: new RegExp(rule.fileRegex, 'g')
                });
            });
        }
    }
    provideCodeLenses(document, token) {
        if (document.fileName.endsWith('code-workspace') || document.fileName === 'settings.json') {
            return [];
        }
        this.codeLenses = [];
        const text = document.getText();
        this.processedRules.forEach((processedRule) => {
            if (this.isProcessedRuleForThatDocument(processedRule, document)) {
                const regex = processedRule.regex;
                let matches;
                while ((matches = regex.exec(text)) !== null) {
                    // eslint-disable-next-line prefer-const
                    let position = document.positionAt(matches.index);
                    // let range = document.getWordRangeAtPosition(position, new RegExp(regexSettings.regex, regexSettings.regex.flags));
                    // eslint-disable-next-line prefer-const
                    let range = new vscode.Range(position, position);
                    if (range) {
                        const codeLens = new vscode.CodeLens(range);
                        codeLens.command = {
                            title: processedRule.message,
                            command: "assistant.codelensAction",
                            tooltip: "Hinty"
                        };
                        this.codeLenses.push(codeLens);
                    }
                }
            }
        });
        return this.codeLenses;
    }
    isProcessedRuleForThatDocument(processedRule, document) {
        if (!processedRule.fileRegex.source || processedRule.fileRegex.source === '') {
            return true;
        }
        else {
            if (document.fileName.match(processedRule.fileRegex)) {
                return true;
            }
        }
    }
    resolveCodeLens(codeLens, token) {
        return codeLens;
    }
}
exports.CodelensProvider = CodelensProvider;
//# sourceMappingURL=CodelensProvider.js.map