# using flask_restful
from flask import Flask, jsonify, request
from flask_restful import Resource, Api
  
# creating the flask app
app = Flask(__name__)
# creating an API object
api = Api(app)


#dummy data
from vulnerabilities import vulnerabilities

  
# making a class for a particular resource
# the get, post methods correspond to get and post requests
# they are automatically mapped by flask_restful.
# other methods include put, delete, etc.
class Hello(Resource):
  
    # corresponds to the GET request.
    # this function is called whenever there
    # is a GET request for this resource
    def get(self):
  
        return jsonify({'message': 'hello world'})
  
    # Corresponds to POST request
    def post(self):
          
        data = request.get_json()     # status code
        return jsonify({'data': data}), 201
  
  
# another resource to calculate the square of a number
""" class Square(Resource):
  
    def get(self, num):
  
        return jsonify({'square': num**2}) """

class Security(Resource):
    #get general
    def get(self):
        return jsonify(vulnerabilities)
    
    def post(self):
        v={'vulnName': request.json['vulnName']}
        for i in vulnerabilities:
            if(i['vulnName'] == v['vulnName']):
                return jsonify(i['vulnSolution'])
        return jsonify({'message': 'no lo contiene'})
    
    #get especifico
    """ def get(self,vulnName):
        vulnerabilityFound= [vuln for vuln in vulnerabilities if vuln['vulnName'] == vulnName]
        if (len(vulnerabilityFound)>0): 
            return jsonify(vulnerabilityFound[0])
        return jsonify({'message': 'Solution not currently available'}) """

class FilePath(Resource):
    file_path=""
    def post(self):
        global file_path
        file_path = request.json['filePath']
        with open(file_path, 'r') as f:
            file_contents = f.read()
        # Perform any other desired actions with the file
        print(f'Received data: {file_path}')
        print(f'The data: {file_contents}')
        return file_path
    
    def get(self):
        return jsonify(file_path)

# adding the defined resources along with their corresponding urls
api.add_resource(Hello, '/')
""" api.add_resource(Square, '/square/<int:num>') """
api.add_resource(Security, '/data')
api.add_resource(FilePath, '/path')

""" api.add_resource(Security, '/data/<string:vulnName>') """
# driver function
if __name__ == '__main__':
  
    app.run(debug = True, port= 4000)